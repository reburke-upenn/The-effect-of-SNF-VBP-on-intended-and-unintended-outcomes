*****************************************************************************************************************************************
*  Project Name :           SNF DID Analysis				 																			*
*  Principal Investigator : Burke																										*
*  Name of Program :        5_FacilityLevel.sas																					*
*  Programmer :             Jonathan Heintz                                                                								*
*  Start Date :             June, 2023	 
*  Proofread : 				F Hutchins June, 2025      		                                                        							*
*  Program Description :	Creating facility level variables for analytic dataset											*
*****************************************************************************************************************************************;

%include '[filepath to code writing library locations]';

****************************************************************************************

SECTION A :  Years 2011 - 2014

****************************************************************************************;


****************************************************************************************
STEP 1: ALL RAW ANNUAL VARIABLES
****************************************************************************************;

*Visit data from MedPAR;
DATA PRETIME_SNF_TEMP1 PRETIME_SNF_TEMP2 PRETIME_SNF_TEMP3 PRETIME_SNF_TEMP4; 
SET HDATA_F.BENE_FINAL (KEEP=PROX_PRVDR_NUM PROX_admsndt Prox_DSCHRGDT	SNF_PRVDR_NUM SNF_ADMSNDT SNF_DSC	  paymcare	 PROX_ADM_YEAR PROX_DSC_YEAR SNF_ADM_YEAR /*flag_rural*/); 
IF INPUT('01/01/2011',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2011',MMDDYY10.) THEN OUTPUT PRETIME_SNF_TEMP1;
	ELSE IF INPUT('01/01/2012',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2012',MMDDYY10.) THEN OUTPUT PRETIME_SNF_TEMP2;
	ELSE IF INPUT('01/01/2013',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2013',MMDDYY10.) THEN OUTPUT PRETIME_SNF_TEMP3;
	ELSE IF INPUT('01/01/2014',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2014',MMDDYY10.) THEN OUTPUT PRETIME_SNF_TEMP4;
RUN;


%MACRO SNF(MIN_TIME,MAX_TIME);
	%LET NUM_TIMESS=%EVAL(&MAX_TIME.-&MIN_TIME.+1);
	%DO TIME=&MIN_TIME. %TO &MAX_TIME. ;
		%IF &TIME.=1 %THEN %LET TIME_PERIOD="1/1/2011 - 12/31/2011";
		%IF &TIME.=2 %THEN %LET TIME_PERIOD="1/1/2012 - 12/31/2012";
		%IF &TIME.=3 %THEN %LET TIME_PERIOD="1/1/2013 - 12/31/2013";
		%IF &TIME.=4 %THEN %LET TIME_PERIOD="1/1/2014 - 12/31/2014";

		%IF &TIME.=1 %THEN %LET YEAR=2011;	
		%IF &TIME.=2 %THEN %LET YEAR=2012;
		%IF &TIME.=3 %THEN %LET YEAR=2013;
		%IF &TIME.=4 %THEN %LET YEAR=2014;

		PROC SORT DATA=PRETIME_SNF_TEMP&TIME. OUT=PRETIME_SNF_TEMP&TIME.B(drop=SNF_ADMSNDT) NODUPKEY; BY SNF_PRVDR_NUM; RUN;

*Facility data from LTC Focus;
		DATA facility_&YEAR.; SET raw.facility_&YEAR.; RUN;
		
		%IF &YEAR.<2017 %THEN %DO;
			PROC SQL;
				CREATE TABLE PRETIME_SNF_ltcfocus&TIME. AS
					SELECT A.*, B.totbeds, b.PROV3225 as SNF_CITY, b.PROV2905 AS SNF_ZIP, b.state AS SNF_STATE , B.county AS SNF_COUNTY, b.agg_cmi_mds3 as SNF_agg_cmi_mds3, b.multifac, B.PROFIT
					FROM PRETIME_SNF_TEMP&TIME.B AS A LEFT JOIN facility_&YEAR. AS B
					ON A.SNF_PRVDR_NUM=B.PROV1680;
			QUIT;
				
			DATA PRETIME_SNF_ltcfocus&TIME.B; SET PRETIME_SNF_ltcfocus&TIME.;
			LABEL totbeds='LTC Focus';
			LABEL SNF_CITY='LTC Focus';
			LABEL SNF_ZIP='LTC Focus';
			LABEL SNF_STATE='LTC Focus';
			run;
		%END;

*Rural Urban Codes from USDA Economic Research Service - using most recent file available in 2023; 
		OPTIONS VALIDVARNAME=V7;
		PROC import datafile = '"[filepath]/ruralurbancodes2013.xls"'
			out = rural_urban_codes_2013 DBMS = XLS REPLACE;
		RUN;
		
		DATA rural_urban_codes_2013B; SET rural_urban_codes_2013;
		LENGTH COUNTY_CLEAN $85;
		COUNTY_CLEAN=TRIM(UPCASE(COUNTY_NAME));
		RUN;
 
		OPTIONS VALIDVARNAME=V7;
		proc import out=ZIP_COUNTY_122015
		datafile="[filepath]/Cousub_comparability.xlsx"
		dbms=xlsx
		replace;
		sheet="Sheet1";
		getnames=YES;
		run;

		DATA ZIP_COUNTY_122015B; SET ZIP_COUNTY_122015;
		IF STATEFP10 ~IN('24','31','37','51') THEN DO;
			CITY=SCAN(FULLNAMELSAD10,1,",");
			COUNTY=SCAN(FULLNAMELSAD10,2,",");
			STATE=SCAN(FULLNAMELSAD10,3,",");
		END;
		
		ELSE IF STATEFP10 IN('24','31','37','51') THEN DO;
			IF SCAN(FULLNAMELSAD10,4,",")='' THEN DO;
				CITY=SCAN(FULLNAMELSAD10,1,",");
				COUNTY=SCAN(FULLNAMELSAD10,2,",");
				STATE=SCAN(FULLNAMELSAD10,3,",");
			END;
			ELSE IF SCAN(FULLNAMELSAD10,4,",") NE '' THEN DO;
				CITY=SCAN(FULLNAMELSAD10,2,",");
				COUNTY=SCAN(FULLNAMELSAD10,3,",");
				STATE=SCAN(FULLNAMELSAD10,4,",");
			END;
		END;
		CITY_CLEAN=TRIM(UPCASE(TRANSTRN(CITY,' CCD','')));
		STATE_ABBREV=FIPSTATE(STATEFP10);
		COUNTY_CLEAN=TRIM(UPCASE(COUNTY));
		RUN;

		PROC SORT DATA=ZIP_COUNTY_122015B OUT=ZIP_COUNTY_122015C NODUPKEY; BY STATE_ABBREV COUNTYFP10; RUN;
	
		PROC SQL;
			CREATE TABLE PRETIME_SNF_ZIP_COUNTY_CW&TIME. AS
			SELECT A.*, B.COUNTY_CLEAN as COUNTY_CW, B.STATE AS STATE_CW
			FROM PRETIME_SNF_ltcfocus&TIME.B AS A LEFT JOIN ZIP_COUNTY_122015C AS B
			ON A.SNF_STATE=B.STATE_ABBREV AND A.SNF_county=B.COUNTYFP10;
		QUIT;
		
		DATA PRETIME_SNF_ZIP_COUNTY_CW&TIME.B; SET PRETIME_SNF_ZIP_COUNTY_CW&TIME.; 
		COUNTY_STATE = catx('_', COUNTY_CW, SNF_STATE);
		RUN;
		DATA rural_urban_codes_2013C; SET rural_urban_codes_2013B;
		COUNTY_STATE = catx('_', COUNTY_CLEAN, STATE);
		RUN;

		PROC SQL;
			CREATE TABLE PRETIME_SNF_RURAL_URBAN&TIME. AS
			SELECT A.*, b.RUCC_2013,B.COUNTY_CLEAN,B.County_Name
			FROM PRETIME_SNF_ZIP_COUNTY_CW&TIME.B AS A LEFT JOIN rural_urban_codes_2013C AS B
			ON A.COUNTY_STATE=B.COUNTY_STATE;
		QUIT;


		PROC SORT DATA=PRETIME_SNF_RURAL_URBAN&TIME. OUT=PRETIME_SNF_RURAL_URBAN&TIME.B NODUPKEY; BY SNF_PRVDR_NUM; RUN;
		DATA PRETIME_SNF_RURAL_URBAN&TIME.C; SET PRETIME_SNF_RURAL_URBAN&TIME.B;
		IF SNF_STATE='CO' &	SNF_COUNTY='105' THEN RUCC_2013=7;
		IF SNF_STATE='FL' &	SNF_COUNTY='081' THEN RUCC_2013=2;
		IF SNF_STATE='NM' &	SNF_COUNTY='099' THEN RUCC_2013=3;
		IF SNF_STATE='NM' &	SNF_COUNTY='099' THEN RUCC_2013=3;
		IF SNF_STATE='VA' &	SNF_COUNTY='560' THEN DO;
			COUNTY_CW='ALLEGHANY COUNTY'; STATE_CW='Virginia';
			COUNTY_STATE = catx('_', COUNTY_CW, SNF_STATE);
			RUCC_2013=6;
		END;
		if RUCC_2013 in (1, 2, 3) then flag_rural = 1; * Metro;
		if RUCC_2013 in (4, 5, 6, 7, 8, 9) then flag_rural = 2; * Non-metro;
		LABEL flag_rural ="ruralurbancodes2013: 1=Metro 2=Non-Metro";
		RUN;

	
		
*Net Operating Margin from SNF Cost Reports;
		OPTIONS VALIDVARNAME=V7;
		proc import dataFILE="[filepath]/SNF_Cost_Report_&YEAR..csv"
			out=COST_REPORT_&YEAR.
			dbms=CSV
			replace;
			getnames=YES;
			guessingrows=300;
		run;
		DATA COST_REPORT_&YEAR._2; SET COST_REPORT_&YEAR.;
		Net_Income_NUM=INPUT(Net_Income,12.);
		Net_Patient_Revenue_NUM=INPUT(Net_Patient_Revenue,12.);
		Total_Other_Income_NUM=INPUT(Total_Other_Income,12.);
		IF Net_Patient_Revenue_NUM NE . & Total_Other_Income_NUM NE . THEN NET_OPERATING_EXP=Net_Patient_Revenue_NUM+Total_Other_Income_NUM;
		
		NET_OPERATING_MARGIN=Net_Income_NUM/NET_OPERATING_EXP;
		
		YEAR=&YEAR.;
			CCN=PUT(compress(Provider_CCN),6.);
			if length(CCN) = 5 then CCN = cat('0', CCN);

		RUN;
		PROC SORT DATA=COST_REPORT_&YEAR._2 NODUPKEY; BY CCN;RUN;
		
		PROC SQL;
			CREATE TABLE PRETIME_SNF_COST&TIME. AS
			SELECT A.*, B.NET_OPERATING_MARGIN, B.Net_Income_NUM as Net_Income, B.NET_OPERATING_EXP, B.Net_Patient_Revenue_NUM AS Net_Patient_Revenue, B.Total_Other_Income_NUM AS Total_Other_Income
			FROM PRETIME_SNF_RURAL_URBAN&TIME.C AS A LEFT JOIN COST_REPORT_&YEAR._2 AS B
			ON A.SNF_PRVDR_NUM=B.CCN;
		QUIT;	
	%END;
%MEND;
%SNF(1,4);



DATA PRETIME_SNF_2011; SET PRETIME_SNF_COST1;
totbeds_NUM=INPUT(totbeds,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=1;
YEAR=2011;
run;
DATA PRETIME_SNF_2012; SET PRETIME_SNF_COST2;
totbeds_NUM=INPUT(totbeds,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=2;
YEAR=2012;
run;
DATA PRETIME_SNF_2013; SET PRETIME_SNF_COST3;
totbeds_NUM=INPUT(totbeds,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=3;
YEAR=2013;
run;
DATA PRETIME_SNF_2014; SET PRETIME_SNF_COST4;
totbeds_NUM=INPUT(totbeds,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
DROP SNF_agg_cmi_mds3;
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
TIME_PERIOD=4;
YEAR=2014;
run;


DATA PRETIME_SNF_ALLTIMES;
SET PRETIME_SNF_2011 PRETIME_SNF_2012 PRETIME_SNF_2013 PRETIME_SNF_2014 ;
UNIQUE_CMS=CATX("_",SNF_PRVDR_NUM,TIME_PERIOD);
RUN;
PROC SORT DATA=PRETIME_SNF_ALLTIMES NODUPKEY; BY SNF_PRVDR_NUM TIME_PERIOD; RUN;

PROC TRANSPOSE DATA=PRETIME_SNF_ALLTIMES OUT=FLAG_RURAL PREFIX=FLAG_RURAL;
BY SNF_PRVDR_NUM; VAR FLAG_RURAL;
RUN;
DATA FLAG_RURAL2 FLAG_RURAL_MOREWORK; SET FLAG_RURAL; BY SNF_PRVDR_NUM;
ARRAY A{4} FLAG_RURAL1-FLAG_RURAL4;
DO I=1 TO 3; DO J=I TO 4;
	IF A{I} NE A{J} THEN DO;
		IF A{I}=. & A{J} NE . THEN A{I}=A{J};
			ELSE IF A{I} NE . & A{J}=. THEN A{J}=A{I};
			ELSE IF A{I} NE . & A{J} NE . THEN FLAG=1;
	END;
END; END;
IF MIN(OF FLAG_RURAL1-FLAG_RURAL4)=MAX(OF FLAG_RURAL1-FLAG_RURAL4) THEN DO; FLAG_RURAL=FLAG_RURAL1; OUTPUT FLAG_RURAL2; END;
	ELSE OUTPUT FLAG_RURAL_MOREWORK;
RUN;  

PROC TRANSPOSE DATA=FLAG_RURAL_MOREWORK OUT=FLAG_RURAL_MOREWORKB PREFIX=FLAG_RURAL;
BY SNF_PRVDR_NUM; VAR FLAG_RURAL1-FLAG_RURAL4;
RUN;
DATA FLAG_RURAL_MOREWORKC; SET FLAG_RURAL_MOREWORKB; BY SNF_PRVDR_NUM;
*N=.;
RETAIN N;
IF FIRST.SNF_PRVDR_NUM THEN N=1;
	ELSE N=N+1;
UNIQUE_CMS=CATX("_",SNF_PRVDR_NUM,N); 
RUN;

DATA PRETIME_SNF_ALLTIMES2; MERGE PRETIME_SNF_ALLTIMES(DROP=FLAG_RURAL) FLAG_RURAL2(KEEP=SNF_PRVDR_NUM FLAG_RURAL);
	BY SNF_PRVDR_NUM;
RUN;
PROC SORT DATA=PRETIME_SNF_ALLTIMES2; BY UNIQUE_CMS; RUN;
PROC SORT DATA=FLAG_RURAL_MOREWORKC; BY UNIQUE_CMS; RUN;
DATA PRETIME_SNF_ALLTIMES3; MERGE PRETIME_SNF_ALLTIMES2 FLAG_RURAL_MOREWORKC(KEEP=UNIQUE_CMS FLAG_RURAL1 RENAME=(FLAG_RURAL1=FLAG_RURAL)); 
	BY UNIQUE_CMS; 
DROP UNIQUE_CMS;
RUN;

PROC SORT DATA=PRETIME_SNF_ALLTIMES3 NODUPKEY; BY SNF_PRVDR_NUM TIME_PERIOD;RUN;
DATA PRETIME_SNF_ALLTIMES3; SET PRETIME_SNF_ALLTIMES3 ; RUN;


****************************************************************************************
STEP 2: AGGREGATING PATIENT LEVEL DATA TO QUARTERLY SNF DATA
****************************************************************************************;
DATA BENE_FINAL; SET HDATA_F.BENE_FINAL; RUN;

PROC SORT DATA=BENE_FINAL; BY SNF_PRVDR_NUM; RUN;
DATA TIME_PERIOD_15 TIME_PERIOD_14 TIME_PERIOD_13 TIME_PERIOD_12 TIME_PERIOD_11 TIME_PERIOD_10 TIME_PERIOD_9 TIME_PERIOD_8 TIME_PERIOD_7 TIME_PERIOD_6 TIME_PERIOD_5 TIME_PERIOD_4 TIME_PERIOD_3 TIME_PERIOD_2 TIME_PERIOD_1 TIME_PERIOD_0; 
	SET BENE_FINAL (KEEP=SNF_PRVDR_NUM SNF_admsndt DEATH_DT readmit_ipps_up RTI_NONWHITE DUAL_BINARY CFI_FRAIL_YN  DEATH ALZH_DEM_CCW SNF_UTLZTN_DAY_CNT successful_discharge);
IF INPUT('01/01/2011',MMDDYY10.)<=SNF_admsndt <=INPUT('12/31/2011',MMDDYY10.) THEN TIME_PERIOD=-3;
	ELSE IF INPUT('01/01/2012',MMDDYY10.)<=SNF_admsndt <=INPUT('12/31/2012',MMDDYY10.) THEN TIME_PERIOD=-2;
	ELSE IF INPUT('01/01/2013',MMDDYY10.)<=SNF_admsndt <=INPUT('12/31/2013',MMDDYY10.) THEN TIME_PERIOD=-1;
	ELSE IF INPUT('01/01/2014',MMDDYY10.)<=SNF_admsndt <=INPUT('12/31/2014',MMDDYY10.) THEN TIME_PERIOD=0;
PAT_ENCOUNTER=1;
IF successful_discharge=1 THEN unsuccessful_discharge=0;
	ELSE IF successful_discharge=0 THEN unsuccessful_discharge=1;

IF INPUT('01/01/2011',MMDDYY10.)<=SNF_admsndt <INPUT('04/01/2011',MMDDYY10.) THEN DO; QUARTER=1-16; OUTPUT TIME_PERIOD_15; END;
	ELSE IF INPUT('04/01/2011', MMDDYY10.)<=SNF_admsndt<INPUT('07/01/2011', MMDDYY10.) THEN DO; QUARTER=2-16; OUTPUT TIME_PERIOD_14; END;
	ELSE IF INPUT('07/01/2011', MMDDYY10.)<=SNF_admsndt<INPUT('10/01/2011', MMDDYY10.) THEN DO; QUARTER=3-16; OUTPUT TIME_PERIOD_13; END;
	ELSE IF INPUT('10/01/2011', MMDDYY10.)<=SNF_admsndt<INPUT('01/01/2012', MMDDYY10.) THEN DO; QUARTER=4-16; OUTPUT TIME_PERIOD_12; END;
	ELSE IF INPUT('01/01/2012', MMDDYY10.)<=SNF_admsndt<INPUT('04/01/2012', MMDDYY10.) THEN DO; QUARTER=5-16; OUTPUT TIME_PERIOD_11; END;
	ELSE IF INPUT('04/01/2012', MMDDYY10.)<=SNF_admsndt<INPUT('07/01/2012', MMDDYY10.) THEN DO; QUARTER=6-16; OUTPUT TIME_PERIOD_10; END;
	ELSE IF INPUT('07/01/2012', MMDDYY10.)<=SNF_admsndt<INPUT('10/01/2012', MMDDYY10.) THEN DO; QUARTER=7-16; OUTPUT TIME_PERIOD_9; END;
	ELSE IF INPUT('10/01/2012', MMDDYY10.)<=SNF_admsndt<INPUT('01/01/2013', MMDDYY10.) THEN DO; QUARTER=8-16; OUTPUT TIME_PERIOD_8; END;
	ELSE IF INPUT('01/01/2013', MMDDYY10.)<=SNF_admsndt<INPUT('04/01/2013', MMDDYY10.) THEN DO; QUARTER=9-16; OUTPUT TIME_PERIOD_7; END;
	ELSE IF INPUT('04/01/2013', MMDDYY10.)<=SNF_admsndt<INPUT('07/01/2013', MMDDYY10.) THEN DO; QUARTER=10-16; OUTPUT TIME_PERIOD_6; END;
	ELSE IF INPUT('07/01/2013', MMDDYY10.)<=SNF_admsndt<INPUT('10/01/2013', MMDDYY10.) THEN DO; QUARTER=11-16; OUTPUT TIME_PERIOD_5; END;
	ELSE IF INPUT('10/01/2013', MMDDYY10.)<=SNF_admsndt<INPUT('01/01/2014', MMDDYY10.) THEN DO; QUARTER=12-16; OUTPUT TIME_PERIOD_4; END;
	ELSE IF INPUT('01/01/2014', MMDDYY10.)<=SNF_admsndt<INPUT('04/01/2014', MMDDYY10.) THEN DO; QUARTER=13-16; OUTPUT TIME_PERIOD_3; END;
	ELSE IF INPUT('04/01/2014', MMDDYY10.)<=SNF_admsndt<INPUT('07/01/2014', MMDDYY10.) THEN DO; QUARTER=14-16; OUTPUT TIME_PERIOD_2; END;
	ELSE IF INPUT('07/01/2014', MMDDYY10.)<=SNF_admsndt<INPUT('10/01/2014', MMDDYY10.) THEN DO; QUARTER=15-16; OUTPUT TIME_PERIOD_1; END;
	ELSE IF INPUT('10/01/2014', MMDDYY10.)<=SNF_admsndt<INPUT('01/01/2015', MMDDYY10.) THEN DO; QUARTER=16-16; OUTPUT TIME_PERIOD_0; END;
RUN;

%MACRO PRETIME_QUARTER_VARS;
	%LET VAR_LIST = PAT_ENCOUNTER DEATH readmit_ipps_up RTI_NONWHITE DUAL_BINARY CFI_FRAIL_YN ALZH_DEM_CCW SNF_UTLZTN_DAY_CNT successful_discharge unsuccessful_discharge
		;
	%LET N = %SYSFUNC(COUNTW(&VAR_LIST.));
	
	%DO I=1 %TO &N.;
		%LET VAR=%SCAN(&VAR_LIST., &I.);
		%DO TIME_PERIOD=0 %TO 15;
			PROC MEANS DATA=TIME_PERIOD_&TIME_PERIOD. NOPRINT; VAR &VAR.;  BY SNF_PRVDR_NUM; OUTPUT OUT=&VAR.&TIME_PERIOD.(DROP=_:) SUM=QUARTER_&VAR.; RUN;
		%END;
	%END;
	
	%DO TIME_PERIOD=0 %TO 15;
		PROC SORT DATA=TIME_PERIOD_&TIME_PERIOD. OUT=TIME_PERIOD_&TIME_PERIOD.B NODUPKEY; BY SNF_PRVDR_NUM; RUN;
		DATA TIME_PERIOD_&TIME_PERIOD.C; 
			MERGE TIME_PERIOD_&TIME_PERIOD.B 
				%DO I=1 %TO &N.;
					%LET VAR=%SCAN(&VAR_LIST., &I.);
					&VAR.&TIME_PERIOD.
				%END;;
			BY  SNF_PRVDR_NUM; 
		RUN;
	%END;

	DATA PRETIME_SNFS_PER_QUARTER;
	SET 	
	%DO TIME_PERIOD=0 %TO 15;
		TIME_PERIOD_&TIME_PERIOD.C
	%END;;
	PROC SORT DATA=PRETIME_SNFS_PER_QUARTER NODUPKEY; BY SNF_PRVDR_NUM TIME_PERIOD QUARTER; RUN;
%MEND;
%PRETIME_QUARTER_VARS;

DATA /*HDATA_F.*/PRETIME_SNFS_QUARTERLY_FINAL; SET PRETIME_SNFS_PER_QUARTER; 
QUARTER_MORTALITY_RATE=QUARTER_DEATH/QUARTER_PAT_ENCOUNTER;
QUARTER_READMIN_RATE=QUARTER_readmit_ipps_up/QUARTER_PAT_ENCOUNTER;
QUARTER_RTI_NONWHITE_RATE=QUARTER_RTI_NONWHITE/QUARTER_PAT_ENCOUNTER;
QUARTER_DUAL_BINARY_RATE=QUARTER_DUAL_BINARY/QUARTER_PAT_ENCOUNTER;
QUARTER_CFI_FRAIL_YN_RATE=QUARTER_CFI_FRAIL_YN/QUARTER_PAT_ENCOUNTER;
QUARTER_DEM_CCW=QUARTER_ALZH_DEM_CCW/QUARTER_PAT_ENCOUNTER;
QUARTER_UD_RATE=QUARTER_successful_discharge/QUARTER_PAT_ENCOUNTER;
QUARTER_SD_RATE=QUARTER_unsuccessful_discharge/QUARTER_PAT_ENCOUNTER;

IF QUARTER = . THEN YEAR = . ;
	ELSE if QUARTER <= -12 then YEAR = 2011;
	ELSE if QUARTER <= -8 then YEAR = 2012;
    else if QUARTER <= -4 then YEAR = 2013;
    else if QUARTER <= 0 then YEAR = 2014;

DROP SNF_admsndt  DEATH_DT
	 ALZH_DEM_CCW	readmit_ipps_up	 CFI_FRAIL_YN		DUAL_BINARY	RTI_NONWHITE 
	 successful_discharge	DEATH	TIME_PERIOD	PAT_ENCOUNTER	unsuccessful_discharge SNF_UTLZTN_DAY_CNT;

RENAME
	QUARTER_PAT_ENCOUNTER=QUARTER_ENCOUNTERS
	QUARTER_DEATH=QUARTER_DEATHS
	QUARTER_readmit_ipps_up=QUARTER_READMINS;

LABEL 
	QUARTER_SNF_UTLZTN_DAY_CNT='Quarterly total number of utilization days'
	QUARTER_CFI_FRAIL_YN='Quarterly total number of patients considered frail by Kim index'
	QUARTER_ALZH_DEM_CCW="Quarterly total number of patients with Alzheimer's/Dementia defined by CCW"
	QUARTER_DEATH='Quarterly total number of patient deaths'
	QUARTER_DUAL_BINARY='Quarterly total number of dual eligible patiens'
	QUARTER_PAT_ENCOUNTER='Quarterly total number of patient encounters'
	QUARTER_readmit_ipps_up='Quarterly total number of patient readmissions within 30 days of discharge'
	QUARTER_RTI_NONWHITE='Quarterly total number of nonwhite patients'
	QUARTER_RTI_NONWHITE_RATE='Quarterly rate of nonwhite patients'
	QUARTER_CFI_FRAIL_YN_RATE='Quarterly Frailty Rate identified by Kim Index'
	QUARTER_DEM_CCW="Quarterly Alzheimer's/Dementia rate identified by CCW"
	QUARTER_DUAL_BINARY_RATE='Quarterly dual eligiblitity rate'
	YEAR='Year of quarter'
;
RUN;



****************************************************************************************
STEP 3: AGGREGATING QUARTERLY SNF DATA TO ANNUAL SNF DATA
****************************************************************************************;
PROC SORT DATA=/*HDATA_F.*/PRETIME_SNFS_QUARTERLY_FINAL OUT=PRETIME_SNFS_PER_QUARTER; BY SNF_PRVDR_NUM QUARTER; RUN;
%MACRO PRETIME_ANNUAL_VARS;
	%LET VAR_LIST = QUARTER_ENCOUNTERS QUARTER_SNF_UTLZTN_DAY_CNT QUARTER_DEATHS QUARTER_READMINS QUARTER_RTI_NONWHITE QUARTER_DUAL_BINARY QUARTER_CFI_FRAIL_YN QUARTER_ALZH_DEM_CCW QUARTER_unsuccessful_discharge QUARTER_successful_discharge
		;
	%LET N = %SYSFUNC(COUNTW(&VAR_LIST.));
	
	%DO I=1 %TO &N.;
		%LET VAR=%SCAN(&VAR_LIST., &I.);
		%LET VAR_NAME=%SUBSTR(&VAR., 9);
		PROC MEANS DATA=PRETIME_SNFS_PER_QUARTER NOPRINT; VAR &VAR.; BY SNF_PRVDR_NUM YEAR; OUTPUT OUT=ANNUAL_&VAR_NAME.(DROP=_TYPE_ _FREQ_) SUM=ANNUAL_&VAR_NAME.; run;
	%END;

	DATA PRETIME_SNFS_PER_YEAR;
	MERGE 	
	%DO I=1 %TO &N.; %LET VAR=%SCAN(&VAR_LIST., &I.); %LET VAR_NAME=%SUBSTR(&VAR., 9);
		ANNUAL_&VAR_NAME.
	%END;; BY SNF_PRVDR_NUM YEAR;
	RUN;
%MEND;
%PRETIME_ANNUAL_VARS;

DATA PRETIME_SNFS_PER_YEAR2; SET PRETIME_SNFS_PER_YEAR;
ANNUAL_READ_RATE=ANNUAL_READMINS/ANNUAL_ENCOUNTERS;
ANNUAL_MORTALITY_RATE=ANNUAL_DEATHS/ANNUAL_ENCOUNTERS;
ANNUAL_RTI_NONWHITE_RATE=ANNUAL_RTI_NONWHITE/ANNUAL_ENCOUNTERS;
ANNUAL_DUAL_BINARY_RATE=ANNUAL_DUAL_BINARY/ANNUAL_ENCOUNTERS;
ANNUAL_CFI_FRAIL_YN_RATE=ANNUAL_CFI_FRAIL_YN/ANNUAL_ENCOUNTERS;
ANNUAL_ALZH_DEM_CCW_RATE=ANNUAL_ALZH_DEM_CCW/ANNUAL_ENCOUNTERS;
ANNUAL_UD_RATE=ANNUAL_unsuccessful_discharge /ANNUAL_ENCOUNTERS;
ANNUAL_SD_RATE=ANNUAL_successful_discharge /ANNUAL_ENCOUNTERS;
RUN;


****************************************************************************************
STEP 4: MERGING RAW ANNUAL SNF DATA TO AGGREGATED ANNUAL SNF DATA
****************************************************************************************;
PROC SQL;
	CREATE TABLE PRETIME_SNFS_PER_YEAR3 AS
	SELECT A.*, 
		B.FLAG_RURAL, B.NET_OPERATING_MARGIN, B.Net_Income, B.NET_OPERATING_EXP,
		B.RUCC_2013,	B.SNF_CITY,	B.SNF_COUNTY,	B.SNF_STATE,	B.SNF_ZIP,	
		B.totbeds_NUM AS totbeds, B.SNF_agg_cmi_mds3_num as SNF_agg_cmi_mds3, B.MULTIFAC, b.profit
	FROM PRETIME_SNFS_PER_YEAR2 AS A FULL OUTER JOIN /*HDATA_F.*/PRETIME_SNF_ALLTIMES3 AS B
	ON A.SNF_PRVDR_NUM=B.SNF_PRVDR_NUM AND A.YEAR=B.YEAR;
QUIT;


DATA /*HDATA_F.*/PRETIME_SNFS_ANNUAL_FINAL; SET PRETIME_SNFS_PER_YEAR3; 
label ANNUAL_ALZH_DEM_CCW="Annual total number of patients with Alzheimer's/Dementia defined by CCW";
label ANNUAL_ALZH_DEM_CCW_RATE="Annual Alzheimer's/Dementia defined by CCW rate";
label ANNUAL_CFI_FRAIL_YN='Annual total number of patients considered frail by Kim index';
label ANNUAL_CFI_FRAIL_YN_RATE='Annual Frailty Rate identified by Kim Index';
label ANNUAL_DEATHS='Anual total number of patient deaths';
label ANNUAL_DUAL_BINARY='Annual total number of dual eligible patients';
label ANNUAL_DUAL_BINARY_RATE='Annual dual eligiblitity rate';
label ANNUAL_ENCOUNTERS='Annual total number of patient encounters';
label ANNUAL_MORTALITY_RATE='Annual mortality rate';
label ANNUAL_READMINS='Annual total number of patient readmissions within 30 days of discharge';
label ANNUAL_READ_RATE='Annual readmission rate';
label ANNUAL_RTI_NONWHITE='Annual total number of nonwhite patients';
label ANNUAL_RTI_NONWHITE_RATE='Annual rate of nonwhite patients';
label YEAR='Year';
label SNF_PRVDR_NUM='SNF Facility CMS Certification Number (CCN)';
LABEL NET_OPERATING_MARGIN='From SNF cost reports';
LABEL SNF_CITY='LTC Focus:';
LABEL SNF_COUNTY='LTC Focus:';
LABEL SNF_STATE='LTC Focus:';
LABEL SNF_ZIP='LTC Focus:';
LABEL totbeds='LTC Focus:';
LABEL SNF_agg_cmi_mds3='LTC Focus: Average  Resource Utilization Group Nursing Case Index';
LABEL ANNUAL_SNF_UTLZTN_DAY_CNT='Annual total number of utilization days';
RUN;



****************************************************************************************

SECTION B :  Years 2015 - 2021

****************************************************************************************;


****************************************************************************************
STEP 1: ALL RAW ANNUAL VARIABLES
****************************************************************************************;

*Visit data from MedPAR;
DATA SNF_TEMP2015 SNF_TEMP2016 SNF_TEMP2017 SNF_TEMP2018 SNF_TEMP2019 SNF_TEMP2020 SNF_TEMP2021 ; SET HDATA_F.BENE_FINAL (KEEP=PROX_PRVDR_NUM PROX_admsndt Prox_DSCHRGDT	SNF_PRVDR_NUM SNF_ADMSNDT SNF_DSC	  paymcare	 PROX_ADM_YEAR PROX_DSC_YEAR SNF_ADM_YEAR /*flag_rural*/); 
IF INPUT('01/01/2015',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2015',MMDDYY10.) THEN OUTPUT SNF_TEMP2015;
	ELSE IF INPUT('01/01/2016',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2016',MMDDYY10.) THEN OUTPUT SNF_TEMP2016;
		ELSE IF INPUT('01/01/2017',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2017',MMDDYY10.) THEN OUTPUT SNF_TEMP2017;
			ELSE IF INPUT('01/01/2018',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2018',MMDDYY10.) THEN OUTPUT SNF_TEMP2018;
					ELSE IF INPUT('01/01/2019',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2019',MMDDYY10.) THEN OUTPUT SNF_TEMP2019;
						ELSE IF INPUT('01/01/2020',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2020',MMDDYY10.) THEN OUTPUT SNF_TEMP2020;
							ELSE IF INPUT('01/01/2021',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2021',MMDDYY10.) THEN OUTPUT SNF_TEMP2021;

RUN;

*Facility Data from Provider Information Files, Nursing Home Compare (CMS);
%MACRO SNF(MIN_YEAR,MAX_YEAR);
	OPTIONS VALIDVARNAME=V7;
	proc import dataFILE="[filepath]/ProviderInfo_2015.csv"
	out=ProviderInfo_2015
		dbms=CSV
		replace;
		guessingrows=300;
	run;

	OPTIONS VALIDVARNAME=V7;
	proc import dataFILE="[filepath]/ProviderInfo_2016.csv"
	out=ProviderInfo_2016
		dbms=CSV
		replace;
		guessingrows=1000;
	run;

	%DO YEAR=2017 %TO 2020;
		OPTIONS VALIDVARNAME=V7;
		proc import dataFILE="[filepath]/ProviderInfo_Download.csv"
		out=ProviderInfo_&YEAR.
			dbms=CSV
			replace;
			guessingrows=300;
		run;
	%END;

	OPTIONS VALIDVARNAME=V7;
	proc import dataFILE="[filepath]/NH_ProviderInfo_Nov2021.csv"
		out=ProviderInfo_2021
		dbms=CSV
		replace;
		guessingrows=300;
	run;

	
	
	%LET NUM_YEARS=%EVAL(&MAX_YEAR.-&MIN_YEAR.+1);
	%DO YEAR=&MIN_YEAR. %TO &MAX_YEAR. ;
		%IF &YEAR.=&MIN_YEAR. %THEN %LET TIME_PERIOD="1/1/2015 - 12/31/2015";
		%IF &YEAR.=&MIN_YEAR.+1 %THEN %LET TIME_PERIOD="1/1/2016 - 12/31/2016";
		%IF &YEAR.=&MIN_YEAR.+2 %THEN %LET TIME_PERIOD="1/1/2017 - 12/31/2017";
		%IF &YEAR.=&MIN_YEAR.+3 %THEN %LET TIME_PERIOD="1/1/2018 - 12/31/2018";
		%IF &YEAR.=&MIN_YEAR.+4 %THEN %LET TIME_PERIOD="1/1/2019 - 12/31/2019";
		%IF &YEAR.=&MIN_YEAR.+5 %THEN %LET TIME_PERIOD="1/1/2020 - 12/31/2020";
		%IF &YEAR.=&MIN_YEAR.+6 %THEN %LET TIME_PERIOD="1/1/2021 - 12/31/2021";

		PROC SORT DATA=SNF_TEMP&YEAR. OUT=SNF_TEMP&YEAR.B(drop=SNF_ADMSNDT 	) NODUPKEY; BY SNF_PRVDR_NUM; RUN;
		

		*SNF Overall Star Rating AND Ownership type;
		%IF &YEAR.<2017 %THEN %DO;		
			DATA ProviderInfo_&YEAR._2; SET ProviderInfo_&YEAR.;
			CMS=PUT(compress(PROVNUM),6.);
			if length(CMS) = 5 then CMS = cat('0', CMS);
			RUN;
		
			PROC SQL;
				CREATE TABLE SNF_RATING&YEAR. AS
					SELECT A.*, B.overall_rating, b.Staffing_Rating
					FROM SNF_TEMP&YEAR.B AS A LEFT JOIN ProviderInfo_&YEAR._2 AS B
					ON A.SNF_PRVDR_NUM=B.CMS;
			QUIT;
		%END;		
		%IF 2017<=&YEAR. AND &YEAR.<2021 %THEN %DO;		
			DATA ProviderInfo_&YEAR._2; SET ProviderInfo_&YEAR.;
			CMS=PUT(compress(PROVNUM),6.);
			if length(CMS) = 5 then CMS = cat('0', CMS);
			Staffing_Rating_NUM=INPUT(Staffing_Rating,8.);
			SS_Quality_Rating_NUM=INPUT(SS_Quality_Rating,8.);
			RUN;
		
			PROC SQL;
				CREATE TABLE SNF_RATING&YEAR. AS
					SELECT A.*, B.overall_rating, b.Staffing_Rating_NUM as Staffing_Rating, b.SS_Quality_Rating_NUM as SS_Quality_Rating
					FROM SNF_TEMP&YEAR.B AS A LEFT JOIN ProviderInfo_&YEAR._2 AS B
					ON A.SNF_PRVDR_NUM=B.CMS;
			QUIT;
		%END;
		%IF &YEAR.>=2021 %THEN %DO;
			DATA ProviderInfo_&YEAR._2; SET ProviderInfo_&YEAR.;
			CMS=PUT(compress(Federal_Provider_Number),6.);
			if length(CMS) = 5 then CMS = cat('0', CMS);
			Staffing_Rating_NUM=INPUT(Staffing_Rating,8.);
			SS_Quality_Rating_NUM=INPUT(Short_Stay_QM_Rating,8.);
			RUN;
		
			PROC SQL;
				CREATE TABLE SNF_RATING&YEAR. AS
					SELECT A.*, B.overall_rating, b.Staffing_Rating_NUM as Staffing_Rating, b.SS_Quality_Rating_NUM as SS_Quality_Rating
					FROM SNF_TEMP&YEAR.B AS A LEFT JOIN ProviderInfo_&YEAR._2 AS B
					ON A.SNF_PRVDR_NUM=B.CMS;
			QUIT;
		%END;
		
		
		DATA SNF_RATING&YEAR.B; SET SNF_RATING&YEAR.;
		LABEL overall_rating='&TIME_PERIOD. CMS Provider Info';
		run;


*Facility data from LTC Focus;
		%IF &YEAR<2021 %THEN %DO;
			DATA facility_&YEAR.; SET raw.facility_&YEAR.; 
			RUN;
		%END;
		%IF &YEAR=2021 %THEN %DO;
			PROC import datafile = '[filepath]/facility_2021.xls'
				out = facility_2021 DBMS = XLS REPLACE;
			RUN;
		%END;
		
		%IF &YEAR.<2017 %THEN %DO;
			PROC SQL;
				CREATE TABLE SNF_ltcfocus&YEAR. AS
					SELECT A.*, B.pctNHdaysSNF, B.totbeds, b.PROV3225 as SNF_CITY, b.PROV2905 AS SNF_ZIP, b.state AS SNF_STATE , B.county AS SNF_COUNTY, b.agg_cmi_mds3 as SNF_agg_cmi_mds3, b.multifac, B.PROFIT
					FROM SNF_RATING&YEAR.B AS A LEFT JOIN facility_&YEAR. AS B
					ON A.SNF_PRVDR_NUM=B.PROV1680;
			QUIT;
				
			DATA SNF_ltcfocus&YEAR.B; SET SNF_ltcfocus&YEAR.;
			LABEL pctNHdaysSNF='LTC Focus';
			LABEL totbeds='LTC Focus';
			LABEL SNF_CITY='LTC Focus';
			LABEL SNF_ZIP='LTC Focus';
			LABEL SNF_STATE='LTC Focus';
			run;
		%END;
		%IF 2017<=&YEAR. & &YEAR.<=2019 %THEN %DO;
			PROC SQL;
				CREATE TABLE SNF_ltcfocus&YEAR. AS
					SELECT A.*, B.totbeds, b.PROV3225 as SNF_CITY, b.PROV2905 AS SNF_ZIP, b.state AS SNF_STATE , B.county AS SNF_COUNTY, b.agg_cmi_mds3 as SNF_agg_cmi_mds3, b.multifac, B.PROFIT
					FROM SNF_RATING&YEAR.B AS A LEFT JOIN facility_&YEAR. AS B
					ON A.SNF_PRVDR_NUM=B.PROV1680;
			QUIT;
				
			DATA SNF_ltcfocus&YEAR.B; SET SNF_ltcfocus&YEAR.;
			LABEL totbeds='LTC Focus';
			LABEL SNF_CITY='LTC Focus';
			LABEL SNF_ZIP='LTC Focus';
			LABEL SNF_STATE='LTC Focus';
			run;
		%END;	
		%IF &YEAR.>2019 %THEN %DO;
			PROC SQL;
				CREATE TABLE SNF_ltcfocus&YEAR. AS
					SELECT A.*, B.totbeds, b.PROV3225 as SNF_CITY, b.PROV2905 AS SNF_ZIP, b.state AS SNF_STATE , B.county AS SNF_COUNTY, b.multifac, B.PROFIT
					FROM SNF_RATING&YEAR.B AS A LEFT JOIN facility_&YEAR. AS B
					ON A.SNF_PRVDR_NUM=B.PROV1680;
			QUIT;
				
			DATA SNF_ltcfocus&YEAR.B; SET SNF_ltcfocus&YEAR.;
			LABEL totbeds='LTC Focus';
			LABEL SNF_CITY='LTC Focus';
			LABEL SNF_ZIP='LTC Focus';
			LABEL SNF_STATE='LTC Focus';
			run;
		%END;		


*Rural Urban Codes from USDA Economic Research Service - using most recent file available in 2023; 
		OPTIONS VALIDVARNAME=V7;
		PROC import datafile = '"[filepath]/ruralurbancodes2013.xls"'
			out = rural_urban_codes_2013 DBMS = XLS REPLACE;
		RUN;
		
		DATA rural_urban_codes_2013B; SET rural_urban_codes_2013;
		LENGTH COUNTY_CLEAN $85;
		COUNTY_CLEAN=TRIM(UPCASE(COUNTY_NAME));
		RUN;

		OPTIONS VALIDVARNAME=V7;
		proc import out=ZIP_COUNTY_122015
		datafile="[filepath]/Cousub_comparability.xlsx"
		dbms=xlsx
		replace;
		sheet="Sheet1";
		getnames=YES;
		run;

		DATA ZIP_COUNTY_122015B; SET ZIP_COUNTY_122015;
		IF STATEFP10 ~IN('24','31','37','51') THEN DO;
			CITY=SCAN(FULLNAMELSAD10,1,",");
			COUNTY=SCAN(FULLNAMELSAD10,2,",");
			STATE=SCAN(FULLNAMELSAD10,3,",");
		END;
		
		ELSE IF STATEFP10 IN('24','31','37','51') THEN DO;
			IF SCAN(FULLNAMELSAD10,4,",")='' THEN DO;
				CITY=SCAN(FULLNAMELSAD10,1,",");
				COUNTY=SCAN(FULLNAMELSAD10,2,",");
				STATE=SCAN(FULLNAMELSAD10,3,",");
			END;
			ELSE IF SCAN(FULLNAMELSAD10,4,",") NE '' THEN DO;
				CITY=SCAN(FULLNAMELSAD10,2,",");
				COUNTY=SCAN(FULLNAMELSAD10,3,",");
				STATE=SCAN(FULLNAMELSAD10,4,",");
			END;
		END;
		CITY_CLEAN=TRIM(UPCASE(TRANSTRN(CITY,' CCD','')));
		STATE_ABBREV=FIPSTATE(STATEFP10);
		COUNTY_CLEAN=TRIM(UPCASE(COUNTY));
		RUN;

		PROC SORT DATA=ZIP_COUNTY_122015B OUT=ZIP_COUNTY_122015C NODUPKEY; BY STATE_ABBREV COUNTYFP10; RUN;
	
		PROC SQL;
			CREATE TABLE SNF_ZIP_COUNTY_CW&YEAR. AS
			SELECT A.*, B.COUNTY_CLEAN as COUNTY_CW, B.STATE AS STATE_CW
			FROM SNF_ltcfocus&YEAR.B AS A LEFT JOIN ZIP_COUNTY_122015C AS B
			ON A.SNF_STATE=B.STATE_ABBREV AND A.SNF_county=B.COUNTYFP10;
		QUIT;
		
		DATA SNF_ZIP_COUNTY_CW&YEAR.B; SET SNF_ZIP_COUNTY_CW&YEAR.; 
		COUNTY_STATE = catx('_', COUNTY_CW, SNF_STATE);
		RUN;
		DATA rural_urban_codes_2013C; SET rural_urban_codes_2013B;
		COUNTY_STATE = catx('_', COUNTY_CLEAN, STATE);
		RUN;

		PROC SQL;
			CREATE TABLE SNF_RURAL_URBAN&YEAR. AS
			SELECT A.*, b.RUCC_2013,B.COUNTY_CLEAN,B.County_Name
			FROM SNF_ZIP_COUNTY_CW&YEAR.B AS A LEFT JOIN rural_urban_codes_2013C AS B
			ON A.COUNTY_STATE=B.COUNTY_STATE;
		QUIT;


		PROC SORT DATA=SNF_RURAL_URBAN&YEAR. OUT=SNF_RURAL_URBAN&YEAR.B NODUPKEY; BY SNF_PRVDR_NUM; RUN;
		DATA SNF_RURAL_URBAN&YEAR.C; SET SNF_RURAL_URBAN&YEAR.B;
		IF SNF_STATE='CO' &	SNF_COUNTY='105' THEN RUCC_2013=7;
		IF SNF_STATE='FL' &	SNF_COUNTY='081' THEN RUCC_2013=2;
		IF SNF_STATE='NM' &	SNF_COUNTY='099' THEN RUCC_2013=3;
		IF SNF_STATE='NM' &	SNF_COUNTY='099' THEN RUCC_2013=3;
		IF SNF_STATE='VA' &	SNF_COUNTY='560' THEN DO;
			COUNTY_CW='ALLEGHANY COUNTY'; STATE_CW='Virginia';
			COUNTY_STATE = catx('_', COUNTY_CW, SNF_STATE);
			RUCC_2013=6;
		END;
		if RUCC_2013 in (1, 2, 3) then flag_rural = 1; * Metro;
		if RUCC_2013 in (4, 5, 6, 7, 8, 9) then flag_rural = 2; * Non-metro;
		LABEL flag_rural ="ruralurbancodes2013: 1=Metro 2=Non-Metro";
		RUN;


			
*Net Operating Margin from SNF Cost Reports;
		OPTIONS VALIDVARNAME=V7;
		proc import dataFILE="[filepath]/SNF_Cost_Report_&YEAR..csv"
			out=COST_REPORT_&YEAR.
			dbms=CSV
			replace;
			getnames=YES;
			guessingrows=300;
		run;
		DATA COST_REPORT_&YEAR._2; SET COST_REPORT_&YEAR.;
		Net_Income_NUM=INPUT(Net_Income,12.);
		Net_Patient_Revenue_NUM=INPUT(Net_Patient_Revenue,12.);
		Total_Other_Income_NUM=INPUT(Total_Other_Income,12.);
		IF Net_Patient_Revenue_NUM NE . & Total_Other_Income_NUM NE . THEN NET_OPERATING_EXP=Net_Patient_Revenue_NUM+Total_Other_Income_NUM;
		
		NET_OPERATING_MARGIN=Net_Income_NUM/NET_OPERATING_EXP;
		
		YEAR=&YEAR.;
			CCN=PUT(compress(Provider_CCN),6.);
			if length(CCN) = 5 then CCN = cat('0', CCN);

		RUN;
		PROC SORT DATA=COST_REPORT_&YEAR._2 NODUPKEY; BY CCN;RUN;
		
		PROC SQL;
			CREATE TABLE SNF_COST&YEAR._ANNUAL AS
			SELECT A.*, B.NET_OPERATING_MARGIN, B.Net_Income_NUM as Net_Income, B.NET_OPERATING_EXP, B.Net_Patient_Revenue_NUM AS Net_Patient_Revenue, B.Total_Other_Income_NUM AS Total_Other_Income
			FROM SNF_RURAL_URBAN&YEAR.C AS A LEFT JOIN COST_REPORT_&YEAR._2 AS B
			ON A.SNF_PRVDR_NUM=B.CCN;
		QUIT;	
	%END;
%MEND;

%SNF(2015,2021);



DATA SNF_2015; SET SNF_COST2015_ANNUAL;
pctNHdaysSNF_NUM=INPUT(pctNHdaysSNF,8.);
totbeds_NUM=INPUT(totbeds,8.);
overall_rating_NUM=INPUT(overall_rating,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=1;
YEAR=2015;
DROP overall_rating;
run;
DATA SNF_2016; SET SNF_COST2016_ANNUAL;
pctNHdaysSNF_NUM=INPUT(pctNHdaysSNF,8.);
totbeds_NUM=INPUT(totbeds,8.);
overall_rating_NUM=INPUT(overall_rating,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=2;
YEAR=2016;
DROP overall_rating;
run;
DATA SNF_2017; SET SNF_COST2017_ANNUAL;
totbeds_NUM=INPUT(totbeds,8.);
overall_rating_NUM=INPUT(overall_rating,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=3;
YEAR=2017;
DROP overall_rating;
run;
DATA SNF_2018; SET SNF_COST2018_ANNUAL;
totbeds_NUM=INPUT(totbeds,8.);
overall_rating_NUM=INPUT(overall_rating,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=4;
YEAR=2018;
run;
DATA SNF_2019; SET SNF_COST2019_ANNUAL;
totbeds_NUM=INPUT(totbeds,8.);
overall_rating_NUM=INPUT(overall_rating,8.);
IF SNF_agg_cmi_mds3='LNE' THEN SNF_agg_cmi_mds3='';
SNF_agg_cmi_mds3_NUM=INPUT(SNF_agg_cmi_mds3,8.);
DROP SNF_agg_cmi_mds3;
TIME_PERIOD=5;
YEAR=2019;
DROP overall_rating;
run;
DATA SNF_2020; SET SNF_COST2020_ANNUAL;
totbeds_NUM=INPUT(totbeds,8.);
overall_rating_NUM=INPUT(overall_rating,8.);
TIME_PERIOD=6;
YEAR=2020;
DROP overall_rating;
run;
DATA SNF_2021; SET SNF_COST2021_ANNUAL;
totbeds_NUM=INPUT(totbeds,8.);
overall_rating_NUM=INPUT(overall_rating,8.);
TIME_PERIOD=7;
YEAR=2021;
DROP overall_rating;
run;


DATA SNF_ALLTIMES;
SET SNF_2015(DROP=pctNHdaysSNF) SNF_2016(DROP=pctNHdaysSNF) SNF_2017 SNF_2018 SNF_2019 SNF_2020 SNF_2021 ;
UNIQUE_CMS=CATX("_",SNF_PRVDR_NUM,TIME_PERIOD);
RUN;
PROC SORT DATA=SNF_ALLTIMES NODUPKEY; BY SNF_PRVDR_NUM TIME_PERIOD; RUN;

PROC TRANSPOSE DATA=SNF_ALLTIMES OUT=FLAG_RURAL PREFIX=FLAG_RURAL;
BY SNF_PRVDR_NUM; VAR FLAG_RURAL;
RUN;
DATA FLAG_RURAL2 FLAG_RURAL_MOREWORK; SET FLAG_RURAL; BY SNF_PRVDR_NUM;
ARRAY A{7} FLAG_RURAL1-FLAG_RURAL7;
DO I=1 TO 6; DO J=I TO 7;
	IF A{I} NE A{J} THEN DO;
		IF A{I}=. & A{J} NE . THEN A{I}=A{J};
			ELSE IF A{I} NE . & A{J}=. THEN A{J}=A{I};
			ELSE IF A{I} NE . & A{J} NE . THEN FLAG=1;
	END;
END; END;
IF MIN(OF FLAG_RURAL1-FLAG_RURAL7)=MAX(OF FLAG_RURAL1-FLAG_RURAL7) THEN DO; FLAG_RURAL=FLAG_RURAL1; OUTPUT FLAG_RURAL2; END;
	ELSE OUTPUT FLAG_RURAL_MOREWORK;
RUN;  

PROC TRANSPOSE DATA=FLAG_RURAL_MOREWORK OUT=FLAG_RURAL_MOREWORKB PREFIX=FLAG_RURAL;
BY SNF_PRVDR_NUM; VAR FLAG_RURAL1-FLAG_RURAL7;
RUN;
DATA FLAG_RURAL_MOREWORKC; SET FLAG_RURAL_MOREWORKB; BY SNF_PRVDR_NUM;
RETAIN N;
IF FIRST.SNF_PRVDR_NUM THEN N=1;
	ELSE N=N+1;
UNIQUE_CMS=CATX("_",SNF_PRVDR_NUM,N); 
RUN;

DATA SNF_ALLTIMES2; MERGE SNF_ALLTIMES(DROP=FLAG_RURAL) FLAG_RURAL2(KEEP=SNF_PRVDR_NUM FLAG_RURAL);
	BY SNF_PRVDR_NUM;
RUN;
PROC SORT DATA=SNF_ALLTIMES2; BY UNIQUE_CMS; RUN;
PROC SORT DATA=FLAG_RURAL_MOREWORKC; BY UNIQUE_CMS; RUN;
DATA SNF_ALLTIMES3; MERGE SNF_ALLTIMES2 FLAG_RURAL_MOREWORKC(KEEP=UNIQUE_CMS FLAG_RURAL1 RENAME=(FLAG_RURAL1=FLAG_RURAL)); 
	BY UNIQUE_CMS; 
DROP UNIQUE_CMS;
RUN;

PROC SORT DATA=SNF_ALLTIMES3 out=/*HDATA.*/SNF_ALLTIMES3 NODUPKEY; BY SNF_PRVDR_NUM TIME_PERIOD;RUN;


****************************************************************************************
STEP 2: AGGREGATING PATIENT LEVEL DATA TO QUARTERLY SNF DATA
****************************************************************************************;
PROC SORT DATA=HDATA_F.BENE_FINAL OUT=BENE_FINAL; BY SNF_PRVDR_NUM; RUN;
DATA QUARTER_1	QUARTER_2	QUARTER_3	QUARTER_4	QUARTER_5	QUARTER_6	QUARTER_7	QUARTER_8	QUARTER_9	QUARTER_10	
	QUARTER_11	QUARTER_12	QUARTER_13	QUARTER_14	QUARTER_15	QUARTER_16	QUARTER_17	QUARTER_18	QUARTER_19 QUARTER_20
	QUARTER_21	QUARTER_22	QUARTER_23	QUARTER_24	QUARTER_25	QUARTER_26	QUARTER_27 QUARTER_28 ; 
	SET BENE_FINAL (KEEP=SNF_PRVDR_NUM SNF_admsndt DEATH_DT readmit_ipps_up RTI_NONWHITE DUAL_BINARY CFI_FRAIL_YN  DEATH ALZH_DEM_CCW SNF_UTLZTN_DAY_CNT successful_discharge);
	IF INPUT('01/01/2015',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2015',MMDDYY10.) THEN DO; TIME_PERIOD=1;END;
	ELSE IF INPUT('01/01/2016',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('09/30/2016',MMDDYY10.) THEN DO; TIME_PERIOD=2; END;
		ELSE IF INPUT('10/01/2016',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('09/30/2017',MMDDYY10.) THEN DO; TIME_PERIOD=3; END;
			ELSE IF INPUT('10/01/2017',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('09/30/2018',MMDDYY10.) THEN DO; TIME_PERIOD=4; END;
				ELSE IF INPUT('10/01/2018',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('09/30/2019',MMDDYY10.) THEN DO; TIME_PERIOD=5; END;
					ELSE IF INPUT('10/01/2019',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2019',MMDDYY10.) THEN DO; TIME_PERIOD=6; END;
						ELSE IF INPUT('01/01/2020',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('09/30/2020',MMDDYY10.) THEN DO; TIME_PERIOD=7;  END; 
							ELSE IF INPUT('10/01/2020',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('09/30/2021',MMDDYY10.) THEN DO; TIME_PERIOD=8; END; 
								ELSE IF INPUT('10/01/2021',MMDDYY10.)<=SNF_ADMSNDT <=INPUT('12/31/2021',MMDDYY10.) THEN DO; TIME_PERIOD=9; END; 
					
PAT_ENCOUNTER=1;
IF successful_discharge=1 THEN unsuccessful_discharge=0;
	ELSE IF successful_discharge=0 THEN unsuccessful_discharge=1;

IF INPUT('01/01/2015',MMDDYY10.)<=SNF_ADMSNDT <INPUT('04/01/2015',MMDDYY10.) THEN DO; QUARTER=1; OUTPUT QUARTER_1; END;
	ELSE IF INPUT('01/01/2015', MMDDYY10.)<=SNF_ADMSNDT<INPUT('04/01/2015', MMDDYY10.) THEN DO; QUARTER=1; OUTPUT QUARTER_1; END;
	ELSE IF INPUT('04/01/2015', MMDDYY10.)<=SNF_ADMSNDT<INPUT('07/01/2015', MMDDYY10.) THEN DO; QUARTER=2; OUTPUT QUARTER_2; END;
	ELSE IF INPUT('07/01/2015', MMDDYY10.)<=SNF_ADMSNDT<INPUT('10/01/2015', MMDDYY10.) THEN DO; QUARTER=3; OUTPUT QUARTER_3; END;
	ELSE IF INPUT('10/01/2015', MMDDYY10.)<=SNF_ADMSNDT<INPUT('01/01/2016', MMDDYY10.) THEN DO; QUARTER=4; OUTPUT QUARTER_4; END;
	ELSE IF INPUT('01/01/2016', MMDDYY10.)<=SNF_ADMSNDT<INPUT('04/01/2016', MMDDYY10.) THEN DO; QUARTER=5; OUTPUT QUARTER_5; END;
	ELSE IF INPUT('04/01/2016', MMDDYY10.)<=SNF_ADMSNDT<INPUT('07/01/2016', MMDDYY10.) THEN DO; QUARTER=6; OUTPUT QUARTER_6; END;
	ELSE IF INPUT('07/01/2016', MMDDYY10.)<=SNF_ADMSNDT<INPUT('10/01/2016', MMDDYY10.) THEN DO; QUARTER=7; OUTPUT QUARTER_7; END;
	ELSE IF INPUT('10/01/2016', MMDDYY10.)<=SNF_ADMSNDT<INPUT('01/01/2017', MMDDYY10.) THEN DO; QUARTER=8; OUTPUT QUARTER_8; END;
	ELSE IF INPUT('01/01/2017', MMDDYY10.)<=SNF_ADMSNDT<INPUT('04/01/2017', MMDDYY10.) THEN DO; QUARTER=9; OUTPUT QUARTER_9; END;
	ELSE IF INPUT('04/01/2017', MMDDYY10.)<=SNF_ADMSNDT<INPUT('07/01/2017', MMDDYY10.) THEN DO; QUARTER=10; OUTPUT QUARTER_10; END;
	ELSE IF INPUT('07/01/2017', MMDDYY10.)<=SNF_ADMSNDT<INPUT('10/01/2017', MMDDYY10.) THEN DO; QUARTER=11; OUTPUT QUARTER_11; END;
	ELSE IF INPUT('10/01/2017', MMDDYY10.)<=SNF_ADMSNDT<INPUT('01/01/2018', MMDDYY10.) THEN DO; QUARTER=12; OUTPUT QUARTER_12; END;
	ELSE IF INPUT('01/01/2018', MMDDYY10.)<=SNF_ADMSNDT<INPUT('04/01/2018', MMDDYY10.) THEN DO; QUARTER=13; OUTPUT QUARTER_13; END;
	ELSE IF INPUT('04/01/2018', MMDDYY10.)<=SNF_ADMSNDT<INPUT('07/01/2018', MMDDYY10.) THEN DO; QUARTER=14; OUTPUT QUARTER_14; END;
	ELSE IF INPUT('07/01/2018', MMDDYY10.)<=SNF_ADMSNDT<INPUT('10/01/2018', MMDDYY10.) THEN DO; QUARTER=15; OUTPUT QUARTER_15; END;
	ELSE IF INPUT('10/01/2018', MMDDYY10.)<=SNF_ADMSNDT<INPUT('01/01/2019', MMDDYY10.) THEN DO; QUARTER=16; OUTPUT QUARTER_16; END;
	ELSE IF INPUT('01/01/2019', MMDDYY10.)<=SNF_ADMSNDT<INPUT('04/01/2019', MMDDYY10.) THEN DO; QUARTER=17; OUTPUT QUARTER_17; END;
	ELSE IF INPUT('04/01/2019', MMDDYY10.)<=SNF_ADMSNDT<INPUT('07/01/2019', MMDDYY10.) THEN DO; QUARTER=18; OUTPUT QUARTER_18; END;
	ELSE IF INPUT('07/01/2019', MMDDYY10.)<=SNF_ADMSNDT<INPUT('10/01/2019', MMDDYY10.) THEN DO; QUARTER=19; OUTPUT QUARTER_19; END;
	ELSE IF INPUT('10/01/2019', MMDDYY10.)<=SNF_ADMSNDT<INPUT('01/01/2020', MMDDYY10.) THEN DO; QUARTER=20; OUTPUT QUARTER_20; END;
	ELSE IF INPUT('01/01/2020', MMDDYY10.)<=SNF_ADMSNDT<INPUT('04/01/2020', MMDDYY10.) THEN DO; QUARTER=21; OUTPUT QUARTER_21; END;
	ELSE IF INPUT('04/01/2020', MMDDYY10.)<=SNF_ADMSNDT<INPUT('07/01/2020', MMDDYY10.) THEN DO; QUARTER=22; OUTPUT QUARTER_22; END;
	ELSE IF INPUT('07/01/2020', MMDDYY10.)<=SNF_ADMSNDT<INPUT('10/01/2020', MMDDYY10.) THEN DO; QUARTER=23; OUTPUT QUARTER_23; END;
	ELSE IF INPUT('10/01/2020', MMDDYY10.)<=SNF_ADMSNDT<INPUT('01/01/2021', MMDDYY10.) THEN DO; QUARTER=24; OUTPUT QUARTER_24; END;
	ELSE IF INPUT('01/01/2021', MMDDYY10.)<=SNF_ADMSNDT<INPUT('04/01/2021', MMDDYY10.) THEN DO; QUARTER=25; OUTPUT QUARTER_25; END;
	ELSE IF INPUT('04/01/2021', MMDDYY10.)<=SNF_ADMSNDT<INPUT('07/01/2021', MMDDYY10.) THEN DO; QUARTER=26; OUTPUT QUARTER_26; END;
	ELSE IF INPUT('07/01/2021', MMDDYY10.)<=SNF_ADMSNDT<INPUT('10/01/2021', MMDDYY10.) THEN DO; QUARTER=27; OUTPUT QUARTER_27; END;
	ELSE IF INPUT('10/01/2021', MMDDYY10.)<=SNF_ADMSNDT<INPUT('01/01/2022', MMDDYY10.) THEN DO; QUARTER=28; OUTPUT QUARTER_28; END;
	
RUN;

%MACRO QUARTER_VARS;
	%LET VAR_LIST = PAT_ENCOUNTER DEATH readmit_ipps_up RTI_NONWHITE DUAL_BINARY CFI_FRAIL_YN ALZH_DEM_CCW SNF_UTLZTN_DAY_CNT successful_discharge unsuccessful_discharge
		;
	%LET N = %SYSFUNC(COUNTW(&VAR_LIST.));
	
	%DO I=1 %TO &N.;
		%LET VAR=%SCAN(&VAR_LIST., &I.);
		%DO QUARTER=1 %TO 28;
			PROC MEANS DATA=QUARTER_&QUARTER. NOPRINT; VAR &VAR.;  BY SNF_PRVDR_NUM; OUTPUT OUT=&VAR.&QUARTER.(DROP=_:) SUM=QUARTER_&VAR.; RUN;
		%END;
	%END;
	
	%DO QUARTER=1 %TO 28;
		PROC SORT DATA=QUARTER_&QUARTER. OUT=QUARTER_&QUARTER.B NODUPKEY; BY SNF_PRVDR_NUM; RUN;
		DATA QUARTER_&QUARTER.C; 
			MERGE QUARTER_&QUARTER.B 
				%DO I=1 %TO &N.;
					%LET VAR=%SCAN(&VAR_LIST., &I.);
					&VAR.&QUARTER.
				%END;;
			BY  SNF_PRVDR_NUM; 
		RUN;
	%END;

	DATA SNFS_PER_QUARTER;
	SET 	
	%DO QUARTER=1 %TO 28;
		QUARTER_&QUARTER.C
	%END;;
	PROC SORT DATA=SNFS_PER_QUARTER NODUPKEY; BY SNF_PRVDR_NUM TIME_PERIOD QUARTER; RUN;
%MEND;
%QUARTER_VARS;

DATA /*HDATA_F.*/POSTTIME_SNFS_QUARTERLY_FINAL; SET SNFS_PER_QUARTER; 
QUARTER_MORTALITY_RATE=QUARTER_DEATH/QUARTER_PAT_ENCOUNTER;
QUARTER_READMIN_RATE=QUARTER_readmit_ipps_up/QUARTER_PAT_ENCOUNTER;
QUARTER_RTI_NONWHITE_RATE=QUARTER_RTI_NONWHITE/QUARTER_PAT_ENCOUNTER;
QUARTER_DUAL_BINARY_RATE=QUARTER_DUAL_BINARY/QUARTER_PAT_ENCOUNTER;
QUARTER_CFI_FRAIL_YN_RATE=QUARTER_CFI_FRAIL_YN/QUARTER_PAT_ENCOUNTER;
QUARTER_DEM_CCW=QUARTER_ALZH_DEM_CCW/QUARTER_PAT_ENCOUNTER;
QUARTER_UD_RATE=QUARTER_successful_discharge/QUARTER_PAT_ENCOUNTER;
QUARTER_SD_RATE=QUARTER_unsuccessful_discharge/QUARTER_PAT_ENCOUNTER;

IF QUARTER = . THEN YEAR = . ;
	ELSE if QUARTER <= 4 then YEAR = 2015;
    else if QUARTER <= 8 then YEAR = 2016;
    else if QUARTER <= 12 then YEAR = 2017;
    else if QUARTER <= 16 then YEAR = 2018;
    else if QUARTER <= 20 then YEAR = 2019;
    else if QUARTER <= 24 then YEAR = 2020;
    else if QUARTER <= 28 then YEAR = 2021;

DROP PROX_admsndt Prox_DSCHRGDT SNF_admsndt SNF_DSC PROX_ADM_YEAR PROX_DSC_YEAR SNF_ADM_YEAR DEATH_DT
	 ALZH_DEM_CCW	readmit_ipps_up	 CFI_FRAIL_YN		DUAL_BINARY	RTI_NONWHITE 
	 successful_discharge	DEATH	TIME_PERIOD	PAT_ENCOUNTER	unsuccessful_discharge SNF_UTLZTN_DAY_CNT;

RENAME
	QUARTER_PAT_ENCOUNTER=QUARTER_ENCOUNTERS
	QUARTER_DEATH=QUARTER_DEATHS
	QUARTER_readmit_ipps_up=QUARTER_READMINS;

LABEL 
	QUARTER_SNF_UTLZTN_DAY_CNT='Quarterly total number of utilization days'
	QUARTER_CFI_FRAIL_YN='Quarterly total number of patients considered frail by Kim index'
	QUARTER_ALZH_DEM_CCW="Quarterly total number of patients with Alzheimer's/Dementia defined by CCW"
	QUARTER_DEATH='Quarterly total number of patient deaths'
	QUARTER_DUAL_BINARY='Quarterly total number of dual eligible patiens'
	QUARTER_PAT_ENCOUNTER='Quarterly total number of patient encounters'
	QUARTER_readmit_ipps_up='Quarterly total number of patient readmissions within 30 days of discharge'
	QUARTER_RTI_NONWHITE='Quarterly total number of nonwhite patients'
	QUARTER_RTI_NONWHITE_RATE='Quarterly rate of nonwhite patients'
	QUARTER_CFI_FRAIL_YN_RATE='Quarterly Frailty Rate identified by Kim Index'
	QUARTER_DEM_CCW="Quarterly Alzheimer's/Dementia rate identified by CCW"
	QUARTER_DUAL_BINARY_RATE='Quarterly dual eligiblitity rate'
	YEAR='Year of quarter'
;
RUN;


****************************************************************************************
STEP 3: AGGREGATING QUARTERLY SNF DATA TO ANNUAL SNF DATA
****************************************************************************************;
PROC SORT DATA=/*HDATA_F.*/POSTTIME_SNFS_QUARTERLY_FINAL OUT=SNFS_PER_QUARTER; BY SNF_PRVDR_NUM QUARTER; RUN;
%MACRO ANNUAL_VARS;
	%LET VAR_LIST = QUARTER_ENCOUNTERS QUARTER_SNF_UTLZTN_DAY_CNT QUARTER_DEATHS QUARTER_READMINS QUARTER_RTI_NONWHITE QUARTER_DUAL_BINARY QUARTER_CFI_FRAIL_YN QUARTER_ALZH_DEM_CCW QUARTER_unsuccessful_discharge QUARTER_successful_discharge
		;
	%LET N = %SYSFUNC(COUNTW(&VAR_LIST.));
	
	%DO I=1 %TO &N.;
		%LET VAR=%SCAN(&VAR_LIST., &I.);
		%LET VAR_NAME=%SUBSTR(&VAR., 9);
		PROC MEANS DATA=SNFS_PER_QUARTER NOPRINT; VAR &VAR.; BY SNF_PRVDR_NUM YEAR; OUTPUT OUT=ANNUAL_&VAR_NAME.(DROP=_TYPE_ _FREQ_) SUM=ANNUAL_&VAR_NAME.; run;
	%END;

	DATA SNFS_PER_YEAR;
	MERGE 	
	%DO I=1 %TO &N.; %LET VAR=%SCAN(&VAR_LIST., &I.); %LET VAR_NAME=%SUBSTR(&VAR., 9);
		ANNUAL_&VAR_NAME.
	%END;; BY SNF_PRVDR_NUM YEAR;
	RUN;
%MEND;
%ANNUAL_VARS;

DATA SNFS_PER_YEAR2; SET SNFS_PER_YEAR;
ANNUAL_READ_RATE=ANNUAL_READMINS/ANNUAL_ENCOUNTERS;
ANNUAL_MORTALITY_RATE=ANNUAL_DEATHS/ANNUAL_ENCOUNTERS;
ANNUAL_RTI_NONWHITE_RATE=ANNUAL_RTI_NONWHITE/ANNUAL_ENCOUNTERS;
ANNUAL_DUAL_BINARY_RATE=ANNUAL_DUAL_BINARY/ANNUAL_ENCOUNTERS;
ANNUAL_CFI_FRAIL_YN_RATE=ANNUAL_CFI_FRAIL_YN/ANNUAL_ENCOUNTERS;
ANNUAL_ALZH_DEM_CCW_RATE=ANNUAL_ALZH_DEM_CCW/ANNUAL_ENCOUNTERS;
ANNUAL_UD_RATE=ANNUAL_unsuccessful_discharge /ANNUAL_ENCOUNTERS;
ANNUAL_SD_RATE=ANNUAL_successful_discharge /ANNUAL_ENCOUNTERS;
RUN;



****************************************************************************************
STEP 4: MERGING RAW ANNUAL SNF DATA TO AGGREGATED ANNUAL SNF DATA
****************************************************************************************;
PROC SQL;
	CREATE TABLE SNFS_PER_YEAR3 AS
	SELECT A.*, 
		B.FLAG_RURAL, B.NET_OPERATING_MARGIN, B.Net_Income, B.NET_OPERATING_EXP,
		B.RUCC_2013,	B.SNF_CITY,	B.SNF_COUNTY,	B.SNF_STATE,	B.SNF_ZIP,	B.overall_rating_NUM AS overall_rating,	B.paymcare,	
		B.pctNHdaysSNF_NUM AS pctNHdaysSNF,	B.totbeds_NUM AS totbeds, B.SNF_agg_cmi_mds3_num as SNF_agg_cmi_mds3, B.MULTIFAC, b.profit, B.Staffing_Rating, B.SS_Quality_Rating
	FROM SNFS_PER_YEAR2 AS A FULL OUTER JOIN /*HDATA_F.*/SNF_ALLTIMES3 AS B
	ON A.SNF_PRVDR_NUM=B.SNF_PRVDR_NUM AND A.YEAR=B.YEAR;
QUIT;

/* PROC CONTENTS DATA=HDATA_F.POSTTIME_SNFS_ANNUAL_FINAL;RUN; */
DATA /*HDATA_F.*/POSTTIME_SNFS_ANNUAL_FINAL; SET SNFS_PER_YEAR3; 
label ANNUAL_ALZH_DEM_CCW="Annual total number of patients with Alzheimer's/Dementia defined by CCW";
label ANNUAL_ALZH_DEM_CCW_RATE="Annual Alzheimer's/Dementia defined by CCW rate";
label ANNUAL_CFI_FRAIL_YN='Annual total number of patients considered frail by Kim index';
label ANNUAL_CFI_FRAIL_YN_RATE='Annual Frailty Rate identified by Kim Index';
label ANNUAL_DEATHS='Anual total number of patient deaths';
label ANNUAL_DUAL_BINARY='Annual total number of dual eligible patients';
label ANNUAL_DUAL_BINARY_RATE='Annual dual eligiblitity rate';
label ANNUAL_ENCOUNTERS='Annual total number of patient encounters';
label ANNUAL_MORTALITY_RATE='Annual mortality rate';
label ANNUAL_READMINS='Annual total number of patient readmissions within 30 days of discharge';
label ANNUAL_READ_RATE='Annual readmission rate';
label ANNUAL_RTI_NONWHITE='Annual total number of nonwhite patients';
label ANNUAL_RTI_NONWHITE_RATE='Annual rate of nonwhite patients';
label YEAR='Year';
label SNF_PRVDR_NUM='SNF Facility CMS Certification Number (CCN)';
LABEL NET_OPERATING_MARGIN='From SNF cost reports';
LABEL overall_rating='From Provider Info dataset';
LABEL SNF_CITY='LTC Focus:';
LABEL SNF_COUNTY='LTC Focus:';
LABEL SNF_STATE='LTC Focus:';
LABEL SNF_ZIP='LTC Focus:';
LABEL totbeds='LTC Focus:';
LABEL SNF_agg_cmi_mds3='LTC Focus: Average  Resource Utilization Group Nursing Case Index';
LABEL ANNUAL_SNF_UTLZTN_DAY_CNT='Annual total number of utilization days';
RUN;
