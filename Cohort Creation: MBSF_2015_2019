*****************************************************************************************************************************************
*  Project Name :           SNF DID Analysis				 																			*
*  Principal Investigator : Burke																										*
*  Name of Program :        0b_MBSF_2015_2019.sas																							*
*  Programmers :            Y Wu 9/7/22 &  F Hutchins 8/30/23 & J Heintz 11/08/23  
*  Proofread : 				F Hutchins 8/5/24                                                               			*
*  Program Description :	Pull MBSF beneficiary data from 2015-2019 to identify 
							Medicare coverage type by month	(includes 12-month lookback)														*

This program applies logic published under the Skilled Nursing Facility 
Value-Based Purchasing (SNF VBP) Program. See:
https://www.cms.gov/medicare/quality/nursing-home-improvement/value-based-purchasing/measures

Specific code files were provided by CMS via the following Freedom of Information Act (FOIA) request: 

Control/ID Number: 042320237001
Request Submitted to CMS: 04/26/2023
Records Released: 02/26/2024
Subject: Risk-Standardized Readmissions Rates
Submitting organization: University of Pennsylvania

This program is adapted to use MBSF beneficiary data in place of EDB files.
*****************************************************************************************************************************************;

*Run library locations;
%include '[filepath to code writing library locations]';

*************************************************
***STEP 1. Bring in Beneficiary Coverage Type (DENOM / MBSF)***
*Note: pull 1 year prior for coverage type lookback;
*************************************************;
proc sql noprint;
create table all_bene_1 as 
select *, 2014 as year_w, RTI_RACE_CD as RTI_RACE_2014
from bene.dn100mod_2014
(keep=bene_id rfrnc_yr RTI_RACE_CD COVSTART OREC ESRD_IND bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW)

outer union corr select *, 2015 as year_w, RTI_RACE_CD as RTI_RACE_2015  
from bene.dn100mod_2015
(keep= bene_id rfrnc_yr RTI_RACE_CD COVSTART OREC ESRD_IND 
STATE_CNTY_FIPS_CD_01-STATE_CNTY_FIPS_CD_12 bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 MDCR_STATUS_CODE_01-MDCR_STATUS_CODE_12 
DEATH_DT PTC_PLAN_TYPE_CD_01-PTC_PLAN_TYPE_CD_12 
DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW) 

outer union corr select *, 2016 as year_w, RTI_RACE_CD as RTI_RACE_2016  
from bene.dn100mod_2016
(keep= bene_id rfrnc_yr RTI_RACE_CD COVSTART OREC ESRD_IND 
STATE_CNTY_FIPS_CD_01-STATE_CNTY_FIPS_CD_12 bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 MDCR_STATUS_CODE_01-MDCR_STATUS_CODE_12 
DEATH_DT PTC_PLAN_TYPE_CD_01-PTC_PLAN_TYPE_CD_12 
DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW) 

outer union corr select *, 2017 as year_w, RTI_RACE_CD as RTI_RACE_2017  
from bene.dn100mod_2017
(keep= bene_id rfrnc_yr RTI_RACE_CD COVSTART OREC ESRD_IND 
STATE_CNTY_FIPS_CD_01-STATE_CNTY_FIPS_CD_12 bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 MDCR_STATUS_CODE_01-MDCR_STATUS_CODE_12 
DEATH_DT PTC_PLAN_TYPE_CD_01-PTC_PLAN_TYPE_CD_12 
DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW) 

outer union corr select *, 2018 as year_w, RTI_RACE_CD as RTI_RACE_2018  
from bene.dn100mod_2018
(keep= bene_id rfrnc_yr RTI_RACE_CD COVSTART OREC ESRD_IND 
STATE_CNTY_FIPS_CD_01-STATE_CNTY_FIPS_CD_12 bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 MDCR_STATUS_CODE_01-MDCR_STATUS_CODE_12 
DEATH_DT PTC_PLAN_TYPE_CD_01-PTC_PLAN_TYPE_CD_12 
DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW) 

outer union corr select *, 2019 as year_w, RTI_RACE_CD as RTI_RACE_2019  
from bene.dn100mod_2019
(keep= bene_id rfrnc_yr RTI_RACE_CD COVSTART OREC ESRD_IND 
STATE_CNTY_FIPS_CD_01-STATE_CNTY_FIPS_CD_12 bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 MDCR_STATUS_CODE_01-MDCR_STATUS_CODE_12 
DEATH_DT PTC_PLAN_TYPE_CD_01-PTC_PLAN_TYPE_CD_12 
DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW) 
;
quit;
*n=363747636 ;


*****************************************************
***STEP 2. Classify dual enrollment and hmo status***
*****************************************************;
*Create annual enrollment and dual eligibility variables;
data flag; set all_bene_1;
length HMO_01 HMO_02 HMO_03 HMO_04 HMO_05 HMO_06 HMO_07 HMO_08 HMO_09 HMO_10 HMO_11 HMO_12 
DUAL_01 DUAL_02 DUAL_03 DUAL_04 DUAL_05 DUAL_06 DUAL_07 DUAL_08 DUAL_09 DUAL_10 DUAL_11 DUAL_12 $1.;

array cov1_in [12] $	MDCR_STATUS_CODE_01 MDCR_STATUS_CODE_02 MDCR_STATUS_CODE_03 MDCR_STATUS_CODE_04 MDCR_STATUS_CODE_05 MDCR_STATUS_CODE_06 
						MDCR_STATUS_CODE_07 MDCR_STATUS_CODE_08 MDCR_STATUS_CODE_09 MDCR_STATUS_CODE_10 MDCR_STATUS_CODE_11 MDCR_STATUS_CODE_12 ; 

array buy_in [12] $		BUYIN01 BUYIN02 BUYIN03 BUYIN04 BUYIN05 BUYIN06
						BUYIN07 BUYIN08 BUYIN09 BUYIN10 BUYIN11 BUYIN12;
						
array hmo_in [12] $		HMOIND01 HMOIND02 HMOIND03 HMOIND04 HMOIND05 HMOIND06 
						HMOIND07 HMOIND08 HMOIND09 HMOIND10 HMOIND11 HMOIND12;
						
array hmo_out [12] $	HMO_01 HMO_02 HMO_03 HMO_04 HMO_05 HMO_06 
						HMO_07 HMO_08 HMO_09 HMO_10 HMO_11 HMO_12 ; 
						
array DUAL_STUS_IN [12] $ DUAL_STUS_CD_01 DUAL_STUS_CD_02 DUAL_STUS_CD_03 DUAL_STUS_CD_04
						  DUAL_STUS_CD_05 DUAL_STUS_CD_06 DUAL_STUS_CD_07 DUAL_STUS_CD_08
						  DUAL_STUS_CD_09 DUAL_STUS_CD_10 DUAL_STUS_CD_11 DUAL_STUS_CD_12;

array DUAL_STUS_out[12] $ 	DUAL_01 DUAL_02 DUAL_03 DUAL_04 DUAL_05 DUAL_06
	   						DUAL_07 DUAL_08 DUAL_09 DUAL_10 DUAL_11 DUAL_12;

array FOIA_out [12] $	FO_01 FO_02 FO_03 FO_04 FO_05 FO_06 
						FO_07 FO_08 FO_09 FO_10 FO_11 FO_12 ; 
 
*Approach A: Flag Traditional Medicare months per VBP definition;			
do i=1 to 12; 

	if hmo_in(i) in ("0","4") and buy_in(i) in ("1","3","A","C") then foia_out(i) = "F";
		else foia_out(i) = "X";
	
* Flag dual-eligible beneficiaries;
	if DUAL_STUS_IN[i] in ("99", "NA", "00") then DUAL_STUS_out[i] = "X"; *Non-dual or not enrolled;
		else if DUAL_STUS_IN[i] in ("02", "04", "08") then  DUAL_STUS_out[i] = "F"; *full dual;
		else if DUAL_STUS_IN[i] in ("01", "03", "05", "06") then  DUAL_STUS_out[i] = "P"; *partial dual;
		else if DUAL_STUS_IN[i] in ("09") then DUAL_STUS_out[i]="O"; *other dual,but not medicaid;
	
*Approach B: Flag Traditional Medicare and Medicare Advantage for additional analyses;
*Enrollment coding differs in 2014;					
	
	*starting with all other years; 
	if year_w ne 2014 then do;
		hmo_out[i]=" "; 
		DUAL_STUS_out[i]="";
	
	*CHECKING HMO (Medicare Advantage) STATUS FOR EACH MONTH (2014);
		if hmo_in[i]="0" and buy_in[i]="00" then hmo_out[i]="X"; 
			else if hmo_in[i] in ("0", "4") then hmo_out[i]="F";
			else if hmo_in[i] in ("1", "C") then hmo_out[i]="M";
	end; 

	*2014;
	else do; 
		if cov1_in[i] in ("0", "2", "B") then hmo_out[i]="X";
			else if hmo_in[i] = "5" then hmo_out[i]="X";
			else if hmo_in[i] in ("0", "4") then hmo_out[i]="F";
			else hmo_out[i]="M";
	end;
end;

drop i ; 

run; 
*363,747,636 ;

/* proc freq data=flag; tables hmo_:; run;  */

*Create concatenated Medicare coverage type variables; 
data mbsf_short ; set flag;
length cov_yr dual_yr FOIA_YR $12; 

cov_yr= cat(HMO_01, HMO_02, HMO_03, HMO_04, HMO_05, HMO_06, 
			HMO_07, HMO_08, HMO_09, HMO_10, HMO_11, HMO_12);
dual_yr= cat(DUAL_01, DUAL_02, DUAL_03, DUAL_04, DUAL_05, DUAL_06, 
			DUAL_07, DUAL_08, DUAL_09, DUAL_10, DUAL_11, DUAL_12);
FOIA_YR=COMPRESS(CAT(FO_01,FO_02,FO_03,FO_04,FO_05,FO_06,FO_07,FO_08,FO_09,FO_10,FO_11,FO_12));

*Create a single rti_race variable; 
array rti_in [6] $ RTI_RACE_2019 RTI_RACE_2018 RTI_RACE_2017 RTI_RACE_2016 RTI_RACE_2015 RTI_RACE_2014 ;
			
*code for missing all years race; 
if RTI_RACE_2014="" then RTI_RACE_2014="X";

*Fill missing race with next year value;
RTI_RACE=rti_in[1];

do i=1 to 6; 
	if RTI_RACE="" then RTI_RACE=rti_in[i+1] ; 
end;

drop rti_race_cd RTI_RACE_: ;
run;
*363,747,636;

*****************************************************
***STEP 3. *Stack concatenated variables over year; ***
*****************************************************;
proc sort data=mbsf_short; by bene_id rfrnc_yr; run; 
 
*a. create beneficiary-level dataset; 
proc transpose data=mbsf_short out=wide prefix=covyr;
	by bene_id ;
	id rfrnc_yr;
	var cov_yr; 
run; 
proc transpose data=mbsf_short out=wide1 prefix=dualyr;
	by bene_id ;
	id rfrnc_yr;
	var dual_yr; 
run; 
proc transpose data=mbsf_short out=wide2 prefix=FOIAYR;
	by bene_id ;
	id rfrnc_yr;
	var FOIA_YR; 
run; 
*n=76,128,759   per bene_id; 
	
*Bring back coverage and death date variables; 
proc sort data=mbsf_short; by bene_id death_dt; run; 
DATA DEATH_DT; SET MBSF_SHORT; BY BENE_ID;
IF LAST.BENE_ID;
RUN;

proc sql noprint; 
create table wide_3 as 
select a.*,b.*, c.*, D.*
from  wide as a 
left join wide1 as b on a.bene_id =b.bene_id
left join WIDE2 as c on a.bene_id =c.bene_id
left join death_dt as D on a.bene_id =D.bene_id;
*76128759 ;
quit;

*76128759 ;

*****************************************************
***STEP 4. *Combine and save annual data 2014-2019; ***
*****************************************************;

data FOIADATA.mbsf_POST; 
length 	covyr2014 covyr2015 covyr2016 covyr2017 covyr2018 covyr2019 
		dualyr2014 dualyr2015 dualyr2016 dualyr2017 dualyr2018 dualyr2019 $12
		cov_all dual_all FOIA_ALL $72.;
set wide_3; 

*Adding missing year units for years when beneficiary is not in mbsf;
if covyr2014=" " then covyr2014="999999999999";
if covyr2015=" " then covyr2015="999999999999";
if covyr2016=" " then covyr2016="999999999999";
if covyr2017=" " then covyr2017="999999999999";
if covyr2018=" " then covyr2018="999999999999";
if covyr2019=" " then covyr2019="999999999999";
cov_all=cat(covyr2014, covyr2015, covyr2016, covyr2017, covyr2018, covyr2019);

*Dual eligibility;
if dualyr2014=" " then dualyr2014="999999999999";
if dualyr2015=" " then dualyr2015="999999999999";
if dualyr2016=" " then dualyr2016="999999999999";
if dualyr2017=" " then dualyr2017="999999999999";
if dualyr2018=" " then dualyr2018="999999999999";
if dualyr2019=" " then dualyr2019="999999999999";
dual_all=cat(dualyr2014, dualyr2015, dualyr2016, dualyr2017, dualyr2018, dualyr2019);

if FOIAyr2014=" " then FOIAyr2014="999999999999";
if FOIAyr2015=" " then FOIAyr2015="999999999999";
if FOIAyr2016=" " then FOIAyr2016="999999999999";
if FOIAyr2017=" " then FOIAyr2017="999999999999";
if FOIAyr2018=" " then FOIAyr2018="999999999999";
if FOIAyr2019=" " then FOIAyr2019="999999999999";
FOIA_all=cat(FOIAyr2014, FOIAyr2015, FOIAyr2016, FOIAyr2017, FOIAyr2018, FOIAyr2019);

keep bene_id  death_dt dualyr: dual_all covyr: cov_all STATE_CNTY_FIPS_CD_01-STATE_CNTY_FIPS_CD_12 FOIAYR: FOIA_all; 
label cov_all="Coverage Status by Month, F=FFS, M=MA, X=Neither, 9=Missing"
		dual_all="Dual status by month, X=Non-dual or not enrolled F=full dual, P=partial dual, O=other but not medicaid, 9=Missing";
;

run; *76128759;
