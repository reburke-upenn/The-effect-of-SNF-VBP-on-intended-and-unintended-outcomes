*****************************************************************************************************************************************
*  Project Name :           SNF DID Analysis				 																			*
*  Principal Investigator : Burke																										*
*  Name of Program :        0a_MBSF_2011_2014.sas																							*
*  Programmers :            Y Wu 9/7/22 & J Heintz 11/08/23
*  Proofread : 				F Hutchins 8/5/24                                                                 			*
*  Program Description :	Pull MBSF beneficiary data from 2011-2014 to identify 
							Medicare coverage type by month	(includes 12-month lookback)														*

This program applies logic published under the Skilled Nursing Facility 
Value-Based Purchasing (SNF VBP) Program. See:
https://www.cms.gov/medicare/quality/nursing-home-improvement/value-based-purchasing/measures

Specific code files were provided by CMS via the following Freedom of Information Act (FOIA) request: 

Control/ID Number: 042320237001
Request Submitted to CMS: 04/26/2023
Records Released: 02/26/2024
Subject: Risk-Standardized Readmissions Rates
Submitting organization: University of Pennsylvania

This program is adapted to use MBSF beneficiary data in place of EDB files.
*****************************************************************************************************************************************;

*Run library locations;
%include '[filepath to code writing library locations]';


*************************************************
***STEP 1. Bring in Beneficiary Coverage Type (DENOM / MBSF)***
*Note: pull 1 year prior for coverage type lookback;
*************************************************;
proc sql;
create table all_bene_1 as
select *, 2010 as year_w, RTI_RACE_CD as RTI_RACE_2010 from bene.dn100mod_2010(keep=ms_cd a_mo_cnt a_trm_cd RTI_RACE_CD bene_id rfrnc_yr  OREC ESRD_IND bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 DEATH_DT DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW CNTY_CD STATE_CD bene_zip) 

outer union corr
select *, 2011 as year_w, RTI_RACE_CD as RTI_RACE_2011 from bene.dn100mod_2011(keep=ms_cd a_mo_cnt a_trm_cd RTI_RACE_CD bene_id rfrnc_yr  OREC ESRD_IND bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 DEATH_DT DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW CNTY_CD STATE_CD bene_zip) 

outer union corr
select *, 2012 as year_w, RTI_RACE_CD as RTI_RACE_2012  from bene.dn100mod_2012(keep=ms_cd a_mo_cnt a_trm_cd RTI_RACE_CD bene_id rfrnc_yr  OREC ESRD_IND bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 DEATH_DT DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW CNTY_CD STATE_CD bene_zip) 

outer union corr 
select *, 2013 as year_w, RTI_RACE_CD as RTI_RACE_2013 from bene.dn100mod_2013(keep=ms_cd a_mo_cnt a_trm_cd RTI_RACE_CD bene_id rfrnc_yr  OREC ESRD_IND bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 DEATH_DT DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW CNTY_CD STATE_CD bene_zip) 

outer union corr 
select *, 2014 as year_w, RTI_RACE_CD as RTI_RACE_2014 from bene.dn100mod_2014(keep=ms_cd a_mo_cnt a_trm_cd RTI_RACE_CD bene_id rfrnc_yr  OREC ESRD_IND bene_dob sex race
HMOIND01-HMOIND12 BUYIN01 -BUYIN12 DEATH_DT DUAL_STUS_CD_01-DUAL_STUS_CD_12 V_DOD_SW CNTY_CD STATE_CD bene_zip) 
;
quit;
**267548435    records;


*****************************************************
***STEP 2. Classify dual enrollment and hmo status***
*****************************************************;
data flag; set all_bene_1;

length HMO_01 HMO_02 HMO_03 HMO_04 HMO_05 HMO_06 HMO_07 HMO_08 HMO_09 HMO_10 HMO_11 HMO_12 
DUAL_01 DUAL_02 DUAL_03 DUAL_04 DUAL_05 DUAL_06 DUAL_07 DUAL_08 DUAL_09 DUAL_10 DUAL_11 DUAL_12 
$1.;

array buy_in [12] $	BUYIN01 BUYIN02 BUYIN03 BUYIN04 BUYIN05 BUYIN06
					BUYIN07 BUYIN08 BUYIN09 BUYIN10 BUYIN11 BUYIN12;

array hmo_in [12] $	HMOIND01 HMOIND02 HMOIND03 HMOIND04 HMOIND05 HMOIND06 
					HMOIND07 HMOIND08 HMOIND09 HMOIND10 HMOIND11 HMOIND12;

array hmo_out [12] $	HMO_01 HMO_02 HMO_03 HMO_04 HMO_05 HMO_06 
						HMO_07 HMO_08 HMO_09 HMO_10 HMO_11 HMO_12 ; 
						
array DUAL_STUS_IN [12] $ DUAL_STUS_CD_01 DUAL_STUS_CD_02 DUAL_STUS_CD_03 DUAL_STUS_CD_04
						  DUAL_STUS_CD_05 DUAL_STUS_CD_06 DUAL_STUS_CD_07 DUAL_STUS_CD_08
						  DUAL_STUS_CD_09 DUAL_STUS_CD_10 DUAL_STUS_CD_11 DUAL_STUS_CD_12;

array DUAL_STUS_out[12] $ 	DUAL_01 DUAL_02 DUAL_03 DUAL_04 DUAL_05 DUAL_06
	   						DUAL_07 DUAL_08 DUAL_09 DUAL_10 DUAL_11 DUAL_12;

array FOIA_out [12] $	FO_01 FO_02 FO_03 FO_04 FO_05 FO_06 
						FO_07 FO_08 FO_09 FO_10 FO_11 FO_12 ; 
   						
do i=1 to 12; 

hmo_out[i]=" "; 
DUAL_STUS_out[i]=" ";

*Approach A: Flag Traditional Medicare only per VBP definition;
if hmo_in(i) in ("0","4") and buy_in(i) in ("1","3","A","C") then foia_out(i) = "F";
	else foia_out(i) = "X";
	
*Approach B: Flag Traditional Medicare and Medicare Advantage for additional analyses;
if buy_in[i] in ("0", "2", "B") then hmo_out[i]="X";
	else if hmo_in[i] = "5" then hmo_out[i]="X";
	else if hmo_in[i] in ("0", "4") then hmo_out[i]="F";
	else hmo_out[i]="M";
	
* Flag dual-eligible beneficiaries;
	if DUAL_STUS_IN[i] in (" ", "**", "99", "NA", "00") then DUAL_STUS_out[i] = "X"; *Non-dual or not enrolled;
	else if DUAL_STUS_IN[i] in ("02", "04", "08") then  DUAL_STUS_out[i] = "F"; *full dual;
	else if DUAL_STUS_IN[i] in ("01", "03", "05", "06") then  DUAL_STUS_out[i] = "P"; *partial dual;
	else if DUAL_STUS_IN[i] in ("09") then DUAL_STUS_out[i]="O"; *other dual,but not medicaid;

end; 

drop i; 
run; 
*n=267548435   full data;


*Create concatenated coverage variables; 
data mbsf_short; set flag;
length cov_yr dual_yr FOIA_YR $12; 

cov_yr= cat(HMO_01, HMO_02, HMO_03, HMO_04, HMO_05, HMO_06, 
			HMO_07, HMO_08, HMO_09, HMO_10, HMO_11, HMO_12);
dual_yr= cat(DUAL_01, DUAL_02, DUAL_03, DUAL_04, DUAL_05, DUAL_06, 
			DUAL_07, DUAL_08, DUAL_09, DUAL_10, DUAL_11, DUAL_12);
FOIA_YR=COMPRESS(CAT(FO_01,FO_02,FO_03,FO_04,FO_05,FO_06,FO_07,FO_08,FO_09,FO_10,FO_11,FO_12));
array rti_in [4] $ RTI_RACE_2014 RTI_RACE_2013 RTI_RACE_2012 RTI_RACE_2011 ;
			
*code for missing all years race; 
if RTI_RACE_2011="" then RTI_RACE_2011="X";

*Fill missing race with next year value;
RTI_RACE=rti_in[1];

do i=1 to 6; 
	if RTI_RACE="" then RTI_RACE=rti_in[i+1] ; 
end;

drop rti_race_cd RTI_RACE_: ;

run;
* 267548435   records;

*****************************************************
***STEP 3. *Stack concatenated variables over year; ***
*****************************************************;

proc sort data=mbsf_short; by bene_id rfrnc_yr; run; 

*a. create beneficiary-level dataset; 
proc transpose data=mbsf_short out=wide prefix=covyr;
	by bene_id ;
	id rfrnc_yr;
	var cov_yr; 
run; 
proc transpose data=mbsf_short out=wide1 prefix=dualyr;
	by bene_id ;
	id rfrnc_yr;
	var dual_yr; 
run; 
proc transpose data=mbsf_short out=wide2 prefix=FOIAYR;
	by bene_id ;
	id rfrnc_yr;
	var FOIA_YR; 
run; 
*n=65320449   per bene_id; 

*Bring back coverage and death date variables; 
proc sort data=mbsf_short; by bene_id death_dt; run; 

DATA DEATH_DT; SET MBSF_SHORT; BY BENE_ID;
IF LAST.BENE_ID;
keep BENE_ID death_dt;
RUN;
	
proc sql; 
	
create table wide_3 as 
select a.*,b.*, c.*, D.*
from  wide as a 
left join wide1 as b on a.bene_id =b.bene_id
left join WIDE2 as c on a.bene_id =c.bene_id
left join death_dt as D on a.bene_id =D.bene_id;
*65320449  ;
quit;


*****************************************************
***STEP 4. *Combine and save annual data 2011-2014; ***
*****************************************************;

data /*bene_wide*/ FOIADATA.mbsf_PRE; 
length covyr2011 covyr2012 covyr2013 covyr2014 dualyr2011 dualyr2012 dualyr2013 dualyr2014 FOIAyr2011 FOIAyr2012 FOIAyr2013 FOIAyr2014 $12;
length cov_all dual_all FOIA_ALL $72.; 
set wide_3; 

if covyr2010=" " then covyr2010="999999999999";
if covyr2011=" " then covyr2011="999999999999";
if covyr2012=" " then covyr2012="999999999999";
if covyr2013=" " then covyr2013="999999999999";
if covyr2014=" " then covyr2014="999999999999";
cov_all=cat(covyr2010, covyr2011, covyr2012, covyr2013, covyr2014);

if dualyr2010=" " then dualyr2010="999999999999";
if dualyr2011=" " then dualyr2011="999999999999";
if dualyr2012=" " then dualyr2012="999999999999";
if dualyr2013=" " then dualyr2013="999999999999";
if dualyr2014=" " then dualyr2014="999999999999";
dual_all=cat(dualyr2010, dualyr2011, dualyr2012, dualyr2013, dualyr2014);

if FOIAyr2010=" " then FOIAyr2010="999999999999";
if FOIAyr2011=" " then FOIAyr2011="999999999999";
if FOIAyr2012=" " then FOIAyr2012="999999999999";
if FOIAyr2013=" " then FOIAyr2013="999999999999";
if FOIAyr2014=" " then FOIAyr2014="999999999999";
FOIA_all=cat(FOIAyr2010, FOIAyr2011, FOIAyr2012, FOIAyr2013, FOIAyr2014);

keep bene_id death_dt dualyr: dual_all covyr: cov_all FOIAYR: FOIA_all ; 
label cov_all="Coverage Status by Month, F=FFS, M=MA, X=Neither, 9=Missing"
	  dual_all="Dual status by month, X=Non-dual or not enrolled F=full dual, P=partial dual, O=other but not medicaid, 9=Missing";
run; 
*n=65320449  ;

